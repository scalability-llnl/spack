.. Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
   Spack Project Developers. See the top-level COPYRIGHT file for details.

   SPDX-License-Identifier: (Apache-2.0 OR MIT)

.. chain:

============================
Chaining Spack Installations
============================

You can point your Spack installation to another installation to use any
packages that are installed there. To register the other Spack instance,
you can add it as an entry to ``config.yaml``:

.. code-block:: yaml

  shared_install_trees:
    spack-instance-name:
      root: /path/to/other/spack/opt/spack
      projections:
        all: "${ARCHITECTURE}/${COMPILERNAME}-${COMPILERVER}/${PACKAGE}-${VERSION}-${HASH}"


Once the chained instance is added to the shared_install_trees section,
running ``spack --init-upstream [spack-instance-name]`` will initialize a
pointer to the upstream. The upstream will NOT be registered/usable until
this command is run.

Once the upstream Spack instance has been added, ``spack find`` will
automatically check the upstream instance when querying installed packages,
and new package installations for the local Spack install will use any
dependencies that are installed in the upstream instance.

This other instance of Spack has no knowledge of the local Spack instance
and may not have the same permissions or ownership as the local Spack instance.
This has the following consequences:

#. Upstream Spack instances are not locked. Therefore it is up to users to
   make sure that the local instance is not using an upstream instance when it
   is being modified.

#. Users should not uninstall packages from the upstream instance. Since the
   upstream instance doesn't know about the local instance, it cannot prevent
   the uninstallation of packages which the local instance depends on.

Other details about upstream installations:

#. If a package is installed both locally and upstream, the local installation
   will always be used as a dependency. This can occur if the local Spack
   installs a package which is not present in the upstream, but later on the
   upstream Spack instance also installs that package.

#. If an upstream Spack instance registers and installs an external package,
   the local Spack instance will treat this the same as a Spack-installed
   package. This feature will only work if the upstream Spack instance
   includes the upstream functionality (i.e. if its commit is after March
   27, 2019).

--------------------------
Choosing installation tree
--------------------------

Users can choose which installation tree Spack will interact with using the
``--install-root`` option. This is an option provided to Spack rather than a
subcommand (e.g. ``spack --install-root foo`` install rather than
``spack install --install-root``).
You can select a shared install tree in this manner as well.
Spack has the following default behavior if no install tree is selected:

* If a shared install tree is available, Spack will place an install
  tree in ``~`` and use that
* If no shared install tree is available, Spack will place the install tree in the Spack prefix
  (this matches how Spack has behaved for the last several years)

---------------------------------------
Using Multiple Upstream Spack Instances
---------------------------------------

A single Spack instance can use multiple upstream Spack installations.
Upstream instances are now chained using pointer files that recursively
link one upstream Spack instance to another.
If a Spack upstream points to another Spack instance that also has its own
upstream, the furthest downstream Spack instance will be able to recursively treat
both upstream Spack instances as its own upstream.

-----------------------------------
Using Modules for Upstream Packages
-----------------------------------

The local Spack instance does not generate modules for packages which are
installed upstream. The local Spack instance can be configured to use the
modules generated by the upstream Spack instance.

There are two requirements to use the modules created by an upstream Spack
instance: firstly the upstream instance must do a ``spack module tcl refresh``,
which generates an index file that maps installed packages to their modules;
secondly, the local Spack instance must add a ``modules`` entry to the
configuration:

.. code-block:: yaml

  upstreams:
    spack-instance-1:
      install_tree: /path/to/other/spack/opt/spack
      modules:
        tcl: /path/to/other/spack/share/spack/modules

Each time new packages are installed in the upstream Spack instance, the
upstream Spack maintainer should run ``spack module tcl refresh`` (or the
corresponding command for the type of module they intend to use).

.. note::

   Spack can generate modules that :ref:`automatically load
   <autoloading-dependencies>` the modules of dependency packages. Spack cannot
   currently do this for modules in upstream packages.
