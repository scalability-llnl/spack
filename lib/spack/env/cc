#!/bin/sh
#
# Copyright 2013-2021 Lawrence Livermore National Security, LLC and other
# Spack Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)

#
# Spack compiler wrapper script.
#
# Compiler commands go through this compiler wrapper in Spack builds.
# The compiler wrapper is a thin layer around the standard compilers.
# It enables several key pieces of functionality:
#
# 1. It allows Spack to swap compilers into and out of builds easily.
# 2. It adds several options to the compile line so that spack
#    packages can find their dependencies at build time and run time:
#      -I and/or -isystem arguments for dependency /include directories.
#      -L                 arguments for dependency /lib directories.
#      -Wl,-rpath         arguments for dependency /lib directories.
#

set -u

# This is a newline-delimited string of environment variable names that need to
# be set before the script runs. They are set by routines in
# spack.build_environment as part of the package installation process.
readonly parameters="\
SPACK_ENV_PATH
SPACK_DEBUG_LOG_DIR
SPACK_DEBUG_LOG_ID
SPACK_COMPILER_SPEC
SPACK_CC_RPATH_ARG
SPACK_CXX_RPATH_ARG
SPACK_F77_RPATH_ARG
SPACK_FC_RPATH_ARG
SPACK_TARGET_ARGS
SPACK_DTAGS_TO_ADD
SPACK_DTAGS_TO_STRIP
SPACK_LINKER_ARG
SPACK_SHORT_SPEC
SPACK_SYSTEM_DIRS"

# Optional parameters that aren't required to be set

# Boolean (true/false/custom) if we want to add debug flags
# SPACK_ADD_DEBUG_FLAGS

# If a custom flag is requested, it will be defined
# SPACK_DEBUG_FLAGS

# The compiler input variables are checked for sanity later:
#   SPACK_CC, SPACK_CXX, SPACK_F77, SPACK_FC
# The default compiler flags are passed from these variables:
#   SPACK_CFLAGS, SPACK_CXXFLAGS, SPACK_FFLAGS,
#   SPACK_LDFLAGS, SPACK_LDLIBS
# Debug env var is optional; set to "TRUE" for debug logging:
#   SPACK_DEBUG
# Test command is used to unit test the compiler script.
#   SPACK_TEST_COMMAND

# Print a message to stderr and exit with status 1.
die() {
    echo "$@" >&2
    exit 1
}

check_IFS() {
    readonly should_be="$1"
    if [ "$IFS" != "$should_be" ]; then
        die "\$IFS must be '$should_be', but was '$IFS'."
    fi
}

# Perform the function of `readlink -e` from gnu coreutils in
# a POSIX-compatible way.
#
# $1: An existing path, which may be a symlink or some other type of
#     filesystem entity.
# $2: A string to append to the output after the resolved path.
#     Defaults to '\n'.
#
# Ripped from the rreadlink() function in this fantastic stackoverflow answer:
# https://stackoverflow.com/a/29835459/2518889.
# - Extraneous quotes have been added in several places to match the style in
#   the rest of this file, since the places where shells strictly *need* quotes
#   in expansions is entirely non-obvious to the casual reader.
# - Comments that are repeated or unclear have been removed.
#
# The function is executed within a subshell to localize variables and the
# effect of `cd`.
posix_readlink() (
    target="$1"
    readonly output_separator="${2:-\n}"
    fname=
    unset CDPATH

    # - `command` bypasses aliases and shell functions and also finds builtins in
    #   bash, dash, and ksh. In zsh, option POSIX_BUILTINS must be turned on for
    #   that to happen.
    # - All commands below are invoked via `command`, so we must make sure that
    #   `command` itself is not redefined as an alias or shell function.
    { \unalias command; \unset -f command; } >/dev/null 2>&1
    [ -n "${ZSH_VERSION:-}" ] && options[POSIX_BUILTINS]='on'

    # Resolve potential symlinks until the ultimate target is found.
    while :; do
        if [ ! \( -L "$target" -o -e "$target" \) ]; then
            command printf '%s\n' "ERROR: '$target' does not exist." >&2
            return 1
        fi
        # Change to the target directory. This is necessary for correct
        # resolution of the target path.
        command cd "$(command dirname -- "$target")"
        # Extract the filename.
        fname="$(command basename -- "$target")"
        # Note: Curiously, `basename /` returns '/'
        if [ "$fname" = '/' ]; then
            fname=''
        fi
        # If "$fname" points to a symbolic link, follow it down one level.
        if [ -L "$fname" ]; then
            # Extract the next target path, which may be defined *relative* to
            # the symlink's own directory.
            # Note: Parsing `ls -l` output is the only POSIX-compliant way to
            #       find the symlink target.
            target=$(command ls -l "$fname")
            target=${target#* -> }
            # Resolve the next symlink target.
            continue
        fi
        # The ultimate symlink target has been reached.
        break
    done
    # Get the canonical directory path.
    readonly targetDir="$(command pwd -P)"
    # Output the ultimate target's canonical path.
    # Note that we manually resolve paths ending in /. and /.. to make sure we
    # have a normalized path.
    if [ "$fname" = '.' ]; then
        command printf "%s${output_separator}" "${targetDir%/}"
    elif  [ "$fname" = '..' ]; then
        # Caveat: something like /var/.. will resolve to /private (assuming
        # /var@ -> /private/var), i.e. the '..' is applied
        # AFTER canonicalization.
        command printf \
                "%s${output_separator}" "$(command dirname -- "${targetDir}")"
    else
        command printf "%s${output_separator}" "${targetDir%/}/$fname"
    fi
)

# Perform several types of path normalization on the first argument, which is
# then split by $IFS (which must be set to the value ':'):
# - remove trailing directory slashes,
# - resolve symlinks,
# - remove empty strings,
# - remove repeated paths (including paths which resolve via any symlinks to the
#   same path).
canonicalize_paths() {
    # $1 is split according to $IFS, which is expected to be ':'.
    check_IFS ':'
    for dir in $1; do
        # Remove trailing slashes and resolve symlinks.
        posix_readlink "$dir" '\0' 2>/dev/null
        # Remove repeated lines, without reordering the lines.
    done | awk 'BEGIN { RS = "\0"; ORS = ":" }; !seen[$0]++'
}

# Read input parameters into ???.
# SPACK_SYSTEM_DIRS is delimited by :
readonly SPACK_SYSTEM_DIRS="$(IFS=':' canonicalize_paths "$SPACK_SYSTEM_DIRS")"

# # SPACK_<LANG>FLAGS and SPACK_LDLIBS are split by ' '
# IFS=' ' read -ra SPACK_FFLAGS   <<< "$SPACK_FFLAGS"
# IFS=' ' read -ra SPACK_CPPFLAGS <<< "$SPACK_CPPFLAGS"
# IFS=' ' read -ra SPACK_CFLAGS   <<< "$SPACK_CFLAGS"
# IFS=' ' read -ra SPACK_CXXFLAGS <<< "$SPACK_CXXFLAGS"
# IFS=' ' read -ra SPACK_LDFLAGS  <<< "$SPACK_LDFLAGS"
# IFS=' ' read -ra SPACK_LDLIBS   <<< "$SPACK_LDLIBS"

# Test whether a path $1 is recursively contained in any entry of $2.
path_contained_in_recursively() {
    readonly path_to_check="$(posix_readlink "$1")"
    # $2/$directory_list are split according to $IFS, which may be arbitrary but
    # is likely ':'.
    readonly directory_list="$2"
    for dir_to_test in $directory_list; do
        # Remove the smallest prefix of $dir_to_test matching the pattern
        # *$path_to_check and check if the resulting string is changed, which is
        # equivalent to testing substring containment.
        if [ "${dir_to_test#*$path_to_check}" != "$dir_to_test" ]; then
            return 0
        fi
    done
    return 1
}

# Test whether a path $1 is contained in any entry of $SPACK_SYSTEM_DIRS.
is_system_dir() {
    readonly path="$(posix_readlink "$1")"
    IFS=':' path_contained_in_recursively "$path" "$SPACK_SYSTEM_DIRS"
}

# Exit with error if the parameter given by the name in $1 is unset or empty.
check_param_set() {
    readonly param_name="$1"
    eval ">/dev/null echo \${${param_name}:?Spack compiler must be run from Spack! Input '$param_name' is missing.}"
}

## Ensure all required parameters are set.
for param in $parameters; do
    check_param_set "$param"
done

## Check if optional parameters are defined.

# Define true/false/custom variables we can use in parameter expansions.
True='true'
False='false'
Custom='custom'

# Determine whether $1 is equal to $True, $False, or $Custom.
is_valid_tribool() {
    readonly value="$1"
    [ "$value" = "$True" -o "$value" = "$False" -o "$value" = "$Custom" ]
}

# Ignore the arguments, do nothing, and return successfully.
_() {
    return 0
}

# If we aren't asking for debug flags, don't add them.
_ ${SPACK_ADD_DEBUG_FLAGS:=$False}

if ! is_valid_tribool "$SPACK_ADD_DEBUG_FLAGS"; then
    die "\$SPACK_ADD_DEBUG_FLAGS, if defined, must be one of '$True' '$False', or '$Custom'."
fi

# Figure out the type of compiler, the language, and the mode so that
# the compiler script knows what to do.
#
# Possible languages are C, C++, Fortran 77, and Fortran 90.
# 'command' is set based on the input command to $SPACK_[CC|CXX|F77|F90]
#
# 'mode' is set to one of:
#    vcheck  version check
#    cpp     preprocess
#    cc      compile
#    as      assemble
#    ld      link
#    ccld    compile & link

command="${0##*/}"
case "$command" in
    cpp)
        mode=cpp
        debug_flags='-g'
        ;;
    cc|c89|c99|gcc|clang|armclang|icc|icx|pgcc|nvc|xlc|xlc_r|fcc)
        command="$SPACK_CC"
        language='C'
        comp='CC'
        lang_flags='C'
        debug_flags='-g'
        ;;
    c++|CC|g++|clang++|armclang++|icpc|icpx|pgc++|nvc++|xlc++|xlc++_r|FCC)
        command="$SPACK_CXX"
        language='C++'
        comp='CXX'
        lang_flags='CXX'
        debug_flags='-g'
        ;;
    ftn|f90|fc|f95|gfortran|flang|armflang|ifort|ifx|pgfortran|nvfortran|xlf90|xlf90_r|nagfor|frt)
        command="$SPACK_FC"
        language='Fortran 90'
        comp='FC'
        lang_flags='F'
        debug_flags='-g'
        ;;
    f77|xlf|xlf_r|pgf77)
        command="$SPACK_F77"
        language='Fortran 77'
        comp='F77'
        lang_flags='F'
        debug_flags='-g'
        ;;
    ld|ld.gold|ld.lld)
        mode='ld'
        ;;
    *)
        die "Unknown compiler: $command"
        ;;
esac
# If not set explicitly above, the value of $CC is set to the string 'CC'.
_ ${CC:='CC'}

# If any of the arguments below are present, then the mode is vcheck.
# In vcheck mode, nothing is added in terms of extra search paths or
# libraries.
case "${mode:-}" in
    ''|ld)
        for arg; do
            case "$arg" in
                -v|-V|--version|-dumpversion)
                    mode='vcheck'
                    break
                    ;;
            esac
        done
        ;;
esac

# Finish setting up the mode.
if [ -z "${mode:-}" ]; then
    mode='ccld'
    for arg; do
        case "$arg" in
            -E)
                mode='cpp'
                break
                ;;
            -S)
                mode='as'
                break
                ;;
            -c)
                mode='cc'
                break
                ;;
        esac
    done
fi

# This is needed to ensure we set RPATH instead of RUNPATH
# (or the opposite, depending on the configuration in config.yaml)
#
# Documentation on this mechanism is lacking at best. A few sources
# of information are (note that some of them take explicitly the
# opposite stance that Spack does):
#
# http://blog.qt.io/blog/2011/10/28/rpath-and-runpath/
# https://wiki.debian.org/RpathIssue
#
# The only discussion I could find on enabling new dynamic tags by
# default on ld is the following:
#
# https://sourceware.org/ml/binutils/2013-01/msg00307.html
#
dtags_to_add="${SPACK_DTAGS_TO_ADD}"
dtags_to_strip="${SPACK_DTAGS_TO_STRIP}"
linker_arg="${SPACK_LINKER_ARG}"

# Set up rpath variable according to language.
eval rpath=\$SPACK_${comp}_RPATH_ARG

# Dump the mode and exit if the command is dump-mode.
if [ "$SPACK_TEST_COMMAND" = dump-mode ]; then
    echo "$mode"
    exit
fi

# Check that at least one of the real commands was actually selected,
# otherwise we don't know what to execute.
if [ -z "$command" ]; then
    die "ERROR: Compiler '$SPACK_COMPILER_SPEC' does not support compiling $language programs."
fi

#
# Filter '.' and Spack environment directories out of PATH so that
# this script doesn't just call itself
#
IFS=':' read -ra env_path <<< "$PATH"
IFS=':' read -ra spack_env_dirs <<< "$SPACK_ENV_PATH"
spack_env_dirs+=("" ".")
export PATH=""
for dir in "${env_path[@]}"; do
    addpath=true
    for env_dir in "${spack_env_dirs[@]}"; do
        # if [[ "${dir%%/}" == "$env_dir" ]]; then
        if [ "$dir" = "$env_dir" ]; then
            addpath=false
            break
        fi
    done
    if $addpath; then
        export PATH="${PATH:+$PATH:}$dir"
    fi
done

if [ "$mode" = vcheck ]; then
    exec "${command}" "$@"
fi

# Darwin's linker has a -r argument that merges object files together.
# It doesn't work with -rpath.
# This variable controls whether they are added.
add_rpaths=true
if [ "$mode" = ld ] || [ "$mode" = ccld ];
then
    case "$SPACK_SHORT_SPEC" in
        *darwin*)
            for arg in "$@"; do
                if { [ "$arg" = -r ] && [ "$mode" = ld ];   } ||
                { [ "$arg" = -r ] && [ "$mode" = ccld ]; } ||
                { [ "$arg" = -Wl,-r ] && [ "$mode" = ccld ]; }; then
                    add_rpaths=false
                    break
                fi
            done
            ;;
    esac
fi

# Save original command for debug logging
input_command="$*"

#
# Parse the command line arguments.
#
# We extract -L, -I, -isystem and -Wl,-rpath arguments from the
# command line and recombine them with Spack arguments later.  We
# parse these out so that we can make sure that system paths come
# last, that package arguments come first, and that Spack arguments
# are injected properly.
#
# All other arguments, including -l arguments, are treated as
# 'other_args' and left in their original order.  This ensures that
# --start-group, --end-group, and other order-sensitive flags continue to
# work as the caller expects.
#
# The libs variable is initialized here for completeness, and it is also
# used later to inject flags supplied via `ldlibs` on the command
# line. These come into the wrappers via SPACK_LDLIBS.
#
includes=()
libdirs=()
rpaths=()
system_includes=()
system_libdirs=()
system_rpaths=()
libs=()
other_args=()
isystem_system_includes=()
isystem_includes=()

while [ $# -ne 0 ]; do

    # an RPATH to be added after the case statement.
    rp=""

    # Multiple consecutive spaces in the command line can
    # result in blank arguments
    if [ -z "$1" ]; then
        shift
        continue
    fi

    case "$1" in
        -isystem*)
            arg="${1#-isystem}"
            isystem_was_used=true
            if [ -z "$arg" ]; then shift; arg="$1"; fi
            if is_system_dir "$arg"; then
                isystem_system_includes+=("$arg")
            else
                isystem_includes+=("$arg")
            fi
            ;;
        -I*)
            arg="${1#-I}"
            if [ -z "$arg" ]; then shift; arg="$1"; fi
            if is_system_dir "$arg"; then
                system_includes+=("$arg")
            else
                includes+=("$arg")
            fi
            ;;
        -L*)
            arg="${1#-L}"
            if [ -z "$arg" ]; then shift; arg="$1"; fi
            if is_system_dir "$arg"; then
                system_libdirs+=("$arg")
            else
                libdirs+=("$arg")
            fi
            ;;
        -l*)
            # -loopopt=0 is generated erroneously in autoconf <= 2.69,
            # and passed by ifx to the linker, which confuses it with a
            # library. Filter it out.
            # TODO: generalize filtering of args with an env var, so that
            # TODO: we do not have to special case this here.
            if { [ "$mode" = "ccld" ] || [ $mode = "ld" ]; } \
                && [ "$1" != "${1#-loopopt}" ]; then
                shift
                continue
            fi
            arg="${1#-l}"
            if [ -z "$arg" ]; then shift; arg="$1"; fi
            other_args+=("-l$arg")
            ;;
        -Wl,*)
            arg="${1#-Wl,}"
            if [ -z "$arg" ]; then shift; arg="$1"; fi
            case "$arg" in
                -rpath=*)
                    rp="${arg#-rpath=}"
                    ;;
                --rpath=*)
                    rp="${arg#--rpath=}"
                    ;;
                -rpath,*)
                    rp="${arg#-rpath,}"
                    ;;
                --rpath,*)
                    rp="${arg#--rpath,}"
                    ;;
                ^-?-rpath$)
                    shift; arg="$1"
                    case "$arg" in
                        -Wl,*) die "-Wl,-rpath was not followed by -Wl,*" ;;
                    esac
                    rp="${arg#-Wl,}"
                    ;;
                "$dtags_to_strip")
                    :  # We want to remove explicitly this flag
                    ;;
                *)
                    other_args+=("-Wl,$arg")
                    ;;
            esac
            ;;
        -Xlinker,*)
            arg="${1#-Xlinker,}"
            if [ -z "$arg" ]; then shift; arg="$1"; fi
            case "$arg" in
                -rpath=*)
                    rp="${arg#-rpath=}"
                    ;;
                --rpath=*)
                    rp="${arg#--rpath=}"
                    ;;
                -rpath|--rpath)
                    shift; arg="$1"
                    case "$arg" in
                        -Xlinker,*) die "-Xlinker,-rpath was not followed by -Xlinker,*" ;;
                    esac
                    rp="${arg#-Xlinker,}"
                    ;;
                *)
                    other_args+=("-Xlinker,$arg")
                    ;;
            esac
            ;;
        -Xlinker)
            if [ "$2" = "-rpath" ]; then
                if [ "$3" != "-Xlinker" ]; then
                    die "-Xlinker,-rpath was not followed by -Xlinker,*"
                fi
                shift 3;
                rp="$1"
            elif [ "$2" = "$dtags_to_strip" ] ; then
                shift  # We want to remove explicitly this flag
            else
                other_args+=("$1")
            fi
            ;;
        *)
            if [ "$1" = "$dtags_to_strip" ] ; then
                :  # We want to remove explicitly this flag
            else
                other_args+=("$1")
            fi
            ;;
    esac

    # test rpaths against system directories in one place.
    if [ -n "$rp" ]; then
        if is_system_dir "$rp"; then
            system_rpaths+=("$rp")
        else
            rpaths+=("$rp")
        fi
    fi
    shift
done

#
# Add flags from Spack's cppflags, cflags, cxxflags, fcflags, fflags, and
# ldflags. We stick to the order that gmake puts the flags in by default.
#
# See the gmake manual on implicit rules for details:
# https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
#
flags=()

# Add debug flags
if [ "${SPACK_ADD_DEBUG_FLAGS}" = "true" ]; then
    flags=("${flags[@]}" "${debug_flags}")

# If a custom flag is requested, derive from environment
elif [ "$SPACK_ADD_DEBUG_FLAGS" = "custom" ]; then
    IFS=' ' read -ra SPACK_DEBUG_FLAGS <<< "$SPACK_DEBUG_FLAGS"
    flags=("${flags[@]}" "${SPACK_DEBUG_FLAGS[@]}")
fi

# Fortran flags come before CPPFLAGS
case "$mode" in
    cc|ccld)
        case $lang_flags in
            F)
                flags=("${flags[@]}" "${SPACK_FFLAGS[@]}") ;;
        esac
        ;;
esac

# C preprocessor flags come before any C/CXX flags
case "$mode" in
    cpp|as|cc|ccld)
        flags=("${flags[@]}" "${SPACK_CPPFLAGS[@]}") ;;
esac


# Add C and C++ flags
case "$mode" in
    cc|ccld)
        case $lang_flags in
            C)
                flags=("${flags[@]}" "${SPACK_CFLAGS[@]}") ;;
            CXX)
                flags=("${flags[@]}" "${SPACK_CXXFLAGS[@]}") ;;
        esac
        flags=(${SPACK_TARGET_ARGS[@]} "${flags[@]}")
        ;;
esac

# Linker flags
case "$mode" in
    ld|ccld)
        flags=("${flags[@]}" "${SPACK_LDFLAGS[@]}") ;;
esac

# On macOS insert headerpad_max_install_names linker flag
if [ "$mode" = ld ] || [ "$mode" = ccld ];
then
    case "$SPACK_SHORT_SPEC" in
        *darwin*)
            case "$mode" in
                ld)
                    flags=("${flags[@]}" -headerpad_max_install_names) ;;
                ccld)
                    flags=("${flags[@]}" "-Wl,-headerpad_max_install_names") ;;
            esac
        ;;
    esac
fi

IFS=':' read -ra rpath_dirs <<< "$SPACK_RPATH_DIRS"
if [ "$mode" = ccld ] || [ "$mode" = ld ]; then

    if [ "$add_rpaths" != "false" ] ; then
        # Append RPATH directories. Note that in the case of the
        # top-level package these directories may not exist yet. For dependencies
        # it is assumed that paths have already been confirmed.
        rpaths=("${rpaths[@]}" "${rpath_dirs[@]}")
    fi

fi

IFS=':' read -ra link_dirs <<< "$SPACK_LINK_DIRS"
if [ "$mode" = ccld ] || [ "$mode" = ld ]; then
    libdirs=("${libdirs[@]}" "${link_dirs[@]}")
fi

# add RPATHs if we're in in any linking mode
case "$mode" in
    ld|ccld)
        # Set extra RPATHs
        IFS=':' read -ra extra_rpaths <<< "$SPACK_COMPILER_EXTRA_RPATHS"
        libdirs+=("${extra_rpaths[@]}")
        if [ "$add_rpaths" != "false" ] ; then
            rpaths+=("${extra_rpaths[@]}")
        fi

        # Set implicit RPATHs
        IFS=':' read -ra implicit_rpaths <<< "$SPACK_COMPILER_IMPLICIT_RPATHS"
        if [ "$add_rpaths" != "false" ] ; then
            rpaths+=("${implicit_rpaths[@]}")
        fi

        # Add SPACK_LDLIBS to args
        for lib in "${SPACK_LDLIBS[@]}"; do
            libs+=("${lib#-l}")
        done
        ;;
esac

#
# Finally, reassemble the command line.
#

# Includes and system includes first
args=()

# flags assembled earlier
args+=("${flags[@]}")

# Insert include directories just prior to any system include directories

for dir in "${includes[@]}";         do args+=("-I$dir"); done
for dir in "${isystem_includes[@]}";         do args+=("-isystem" "$dir"); done

IFS=':' read -ra spack_include_dirs <<< "$SPACK_INCLUDE_DIRS"
if [ "$mode" = cpp ] || [ "$mode" = cc ] || [ "$mode" = as ] || [ "$mode" = ccld ]; then
    if [ "$isystem_was_used" = "true" ] ; then
        for dir in "${spack_include_dirs[@]}";  do args+=("-isystem" "$dir"); done
    else
        for dir in "${spack_include_dirs[@]}";  do args+=("-I$dir"); done
    fi
fi

for dir in "${system_includes[@]}";  do args+=("-I$dir"); done
for dir in "${isystem_system_includes[@]}";  do args+=("-isystem" "$dir"); done

# Library search paths
for dir in "${libdirs[@]}";          do args+=("-L$dir"); done
for dir in "${system_libdirs[@]}";   do args+=("-L$dir"); done

# RPATHs arguments
case "$mode" in
    ccld)
        if [ -n "$dtags_to_add" ] ; then args+=("$linker_arg$dtags_to_add") ; fi
        for dir in "${rpaths[@]}";        do args+=("$rpath$dir"); done
        for dir in "${system_rpaths[@]}"; do args+=("$rpath$dir"); done
        ;;
    ld)
        if [ -n "$dtags_to_add" ] ; then args+=("$dtags_to_add") ; fi
        for dir in "${rpaths[@]}";        do args+=("-rpath" "$dir"); done
        for dir in "${system_rpaths[@]}"; do args+=("-rpath" "$dir"); done
        ;;
esac

# Other arguments from the input command
args+=("${other_args[@]}")

# Inject SPACK_LDLIBS, if supplied
for lib in "${libs[@]}"; do
    args+=("-l$lib");
done

full_command=("$command" "${args[@]}")

# prepend the ccache binary if we're using ccache
if [ -n "$SPACK_CCACHE_BINARY" ]; then
    case "$lang_flags" in
        C|CXX)  # ccache only supports C languages
            full_command=("${SPACK_CCACHE_BINARY}" "${full_command[@]}")
            # workaround for stage being a temp folder
            # see #3761#issuecomment-294352232
            export CCACHE_NOHASHDIR=yes
            ;;
    esac
fi

# dump the full command if the caller supplies SPACK_TEST_COMMAND=dump-args
if [ "$SPACK_TEST_COMMAND" = dump-args ]; then
    IFS="
" && echo "${full_command[*]}"
    exit
elif [[ $SPACK_TEST_COMMAND =~ dump-env-* ]]; then
    var=${SPACK_TEST_COMMAND#dump-env-}
    echo "$0: $var: ${!var}"
elif [ -n "$SPACK_TEST_COMMAND" ]; then
    die "ERROR: Unknown test command"
fi

#
# Write the input and output commands to debug logs if it's asked for.
#
if [ "$SPACK_DEBUG" = TRUE ]; then
    input_log="$SPACK_DEBUG_LOG_DIR/spack-cc-$SPACK_DEBUG_LOG_ID.in.log"
    output_log="$SPACK_DEBUG_LOG_DIR/spack-cc-$SPACK_DEBUG_LOG_ID.out.log"
    echo "[$mode] $command $input_command" >> "$input_log"
    echo "[$mode] ${full_command[*]}" >> "$output_log"
fi

exec "${full_command[@]}"
