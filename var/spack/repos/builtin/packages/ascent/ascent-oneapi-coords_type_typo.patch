diff --git a/src/libs/ascent/runtimes/expressions/ascent_blueprint_topologies.cpp b/src/libs/ascent/runtimes/expressions/ascent_blueprint_topologies.cpp
index 23c14799..3c8d87c1 100644
--- a/src/libs/ascent/runtimes/expressions/ascent_blueprint_topologies.cpp
+++ b/src/libs/ascent/runtimes/expressions/ascent_blueprint_topologies.cpp
@@ -160,7 +160,7 @@ PointTopology<T, N>::PointTopology(const std::string &topo_name,
                  << " which has type '" << this->topo_type << "'.");
   }

-  if(this->coord_type == "uniform")
+  if(this->coords_type == "uniform")
   {
     const conduit::Node &n_coords = domain["coordsets/" + this->coords_name];
     const conduit::Node &n_dims = n_coords["dims"];
@@ -177,7 +177,7 @@ PointTopology<T, N>::PointTopology(const std::string &topo_name,
       num_cells *= dims[i] - 1;
     }
   }
-  else if(this->coord_type == "rectilinear")
+  else if(this->coords_type == "rectilinear")
   {
     const conduit::Node &values =
         domain["coordsets/" + this->coords_name + "/values"];
@@ -189,7 +189,7 @@ PointTopology<T, N>::PointTopology(const std::string &topo_name,
       num_points *= coords[i].dtype().number_of_elements();
     }
   }
-  else if(this->coord_type == "explicit")
+  else if(this->coords_type == "explicit")
   {
     const conduit::Node &values =
         domain["coordsets/" + this->coords_name + "/values"];
@@ -203,7 +203,7 @@ PointTopology<T, N>::PointTopology(const std::string &topo_name,
   else
   {
     ASCENT_ERROR("Unknown coordinate type '"
-                 << this->coord_type << "' for point topology '" << topo_name
+                 << this->coords_type << "' for point topology '" << topo_name
                  << "' in domain " << domain.name() << ".");
   }
 }
@@ -213,7 +213,7 @@ std::array<conduit::float64, 3>
 PointTopology<T, N>::vertex_location(const size_t index) const
 {
   std::array<conduit::float64, 3> loc{};
-  if(this->coord_type == "uniform")
+  if(this->coords_type == "uniform")
   {
     auto l_index = detail::logical_index(index, dims);
     for(size_t i = 0; i < N; ++i)
@@ -221,7 +221,7 @@ PointTopology<T, N>::vertex_location(const size_t index) const
       loc[i] = origin[i] + l_index[i] * spacing[i];
     }
   }
-  else if(this->coord_type == "rectilinear")
+  else if(this->coords_type == "rectilinear")
   {
     std::array<size_t, N> dims;
     for(size_t i = 0; i < N; ++i)
@@ -234,7 +234,7 @@ PointTopology<T, N>::vertex_location(const size_t index) const
       loc[i] = coords[i][l_index[i]];
     }
   }
-  else if(this->coord_type == "explicit")
+  else if(this->coords_type == "explicit")
   {
     for(size_t i = 0; i < N; ++i)
     {
@@ -244,7 +244,7 @@ PointTopology<T, N>::vertex_location(const size_t index) const
   else
   {
     ASCENT_ERROR("Unknown coordinate type '"
-                 << this->coord_type << "' for point topology '" << topo_name
+                 << this->coords_type << "' for point topology '" << topo_name
                  << "' in domain " << domain.name() << ".");
   }
   return loc;