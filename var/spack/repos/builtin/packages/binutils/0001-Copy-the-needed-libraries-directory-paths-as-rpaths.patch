From 3f1a2dff9557c937a08eabaf34d5ff44de74cc61 Mon Sep 17 00:00:00 2001
From: Harmen Stoppels <harmenstoppels@gmail.com>
Date: Thu, 17 Mar 2022 16:59:59 +0100
Subject: [PATCH] Copy the needed libraries directory paths as rpaths

---
 ld/ldelf.c  | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++---
 ld/ldfile.c |  1 +
 ld/ldfile.h |  2 ++
 3 files changed, 57 insertions(+), 3 deletions(-)

diff --git a/ld/ldelf.c b/ld/ldelf.c
index 4094640b3f7..346476b21fb 100644
--- a/ld/ldelf.c
+++ b/ld/ldelf.c
@@ -1614,7 +1614,7 @@ void
 ldelf_before_allocation (char *audit, char *depaudit,
 			 const char *default_interpreter_name)
 {
-  const char *rpath;
+  char *rpath;
   asection *sinterp;
   bfd *abfd;
   struct bfd_link_hash_entry *ehdr_start = NULL;
@@ -1669,7 +1669,58 @@ ldelf_before_allocation (char *audit, char *depaudit,
      by dynamic linking.  */
   rpath = command_line.rpath;
   if (rpath == NULL)
-    rpath = (const char *) getenv ("LD_RUN_PATH");
+    rpath = getenv ("LD_RUN_PATH");
+
+  search_dirs_type * search;
+
+  // Loop over every directory in search order, then figure out if it
+  // has been used to locate any library that's being linked.
+  // If so, append it to the rpaths.
+  for (search = search_head; search != NULL; search = search->next) {
+    size_t searchdir_len = strlen(search->name);
+    if (search->consumed) {
+      for (abfd = link_info.input_bfds; abfd; abfd = abfd->link.next) {
+        if (bfd_get_format (abfd) == bfd_object && ((abfd->flags) & DYNAMIC) != 0 && bfd_get_flavour (abfd) == bfd_target_elf_flavour && (elf_dyn_lib_class (abfd) & (DYN_AS_NEEDED | DYN_NO_NEEDED)) == 0 && elf_dt_name (abfd) != NULL) {
+          // check we're using the same path.
+          char * libdir = strrchr(abfd->filename, '/');
+          if (libdir == NULL) continue;
+          size_t libdir_len = libdir - abfd->filename;
+          if (searchdir_len != libdir_len) continue;
+          if (strncmp(search->name, abfd->filename, libdir_len) != 0) continue;
+
+          // prepend cwd if relative path
+          char extra_rpath[PATH_MAX];
+          size_t extra_rpath_len = searchdir_len;
+          if (search->name[0] != '/') {
+            if (getcwd(extra_rpath, sizeof(extra_rpath)) == NULL) continue;
+            size_t cwd_len = strlen(extra_rpath);
+
+            // Can't fit the concatenated path; ignore it.
+            extra_rpath_len = cwd_len + 1 + searchdir_len;
+            if (extra_rpath_len >= PATH_MAX) continue;
+            memcpy(extra_rpath + cwd_len + 1, search->name, searchdir_len + 1);
+          } else {
+            memcpy(extra_rpath, search->name, searchdir_len + 1);
+          }
+
+          if (rpath == NULL) {
+            rpath = (char *) xmalloc (extra_rpath_len + 1);
+            memcpy(rpath, extra_rpath, extra_rpath_len + 1);
+          } else {
+            size_t rpath_len = strlen (rpath);
+            char * buf = (char *) xmalloc (rpath_len + extra_rpath_len + 2);
+            memcpy(buf, rpath, rpath_len);
+            buf[rpath_len] = config.rpath_separator;
+            memcpy(buf + rpath_len + 1, extra_rpath, extra_rpath_len + 1);
+            free (rpath);
+            rpath = buf;
+          }
+
+          break;
+        }
+      }
+    }
+  }
 
   for (abfd = link_info.input_bfds; abfd; abfd = abfd->link.next)
     if (bfd_get_flavour (abfd) == bfd_target_elf_flavour)
@@ -1833,7 +1884,7 @@ ldelf_open_dynamic_archive (const char *arch, search_dirs_type *search,
       free (string);
       return false;
     }
-
+  search->consumed = true;
   entry->filename = string;
 
   /* We have found a dynamic object to include in the link.  The ELF
diff --git a/ld/ldfile.c b/ld/ldfile.c
index 731ae5f7aed..eb6725adf79 100644
--- a/ld/ldfile.c
+++ b/ld/ldfile.c
@@ -106,6 +106,7 @@ ldfile_add_library_path (const char *name, bool cmdline)
   new_dirs = (search_dirs_type *) xmalloc (sizeof (search_dirs_type));
   new_dirs->next = NULL;
   new_dirs->cmdline = cmdline;
+  new_dirs->consumed = 0;
   *search_tail_ptr = new_dirs;
   search_tail_ptr = &new_dirs->next;
 
diff --git a/ld/ldfile.h b/ld/ldfile.h
index 097fdd09346..b9738fbe901 100644
--- a/ld/ldfile.h
+++ b/ld/ldfile.h
@@ -36,6 +36,8 @@ typedef struct search_dirs {
   const char *name;
   /* TRUE if this is from the command line.  */
   bool cmdline;
+  /* TRUE if this search path is used */
+  bool consumed;
 } search_dirs_type;
 
 extern search_dirs_type *search_head;
-- 
2.25.1

